给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。

重复出现的子串要计算它们出现的次数。

示例 1 :

输入: "00110011"
输出: 6
解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。

请注意，一些重复出现的子串要计算它们出现的次数。

另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。
示例 2 :

输入: "10101"
输出: 4
解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。
注意：

s.length 在1到50,000之间。
s 只包含“0”或“1”字符。


O(n^2)的解法超时了
int countBinarySubstrings(string s) {
	int first = -1, second = -1;
	int firstnum = 0, secondnum = 0;
	int count = 0;
	for (int j = 0; j<s.size(); j++) {
		first = -1;
		second = -1;
		firstnum = 0;
		secondnum = 0;
		for (int i = j; i<s.size(); i++) {

			if (first == -1) {
				first = s[i];
				firstnum++;
			}
			else if (second == -1) {
				if (first == s[i])
					firstnum++;
				else {
					second = s[i];
					secondnum++;
				}
			}
			else {
				if (second == s[i]) {
					secondnum++;
				}
				else {
					first = -1;
					second = -1;
					firstnum = 0;
					secondnum = 0;
				}
			}
			if (secondnum == firstnum&&secondnum!=0) {
				count++;
				first = -1;
				second = -1;
				firstnum = 0;
				secondnum = 0;
				break;
			}

		}
	}
	return count;
}

O(N)的解法，统计0和1连续出现的次数，如00110则为2 2 1
class Solution {
public:
int countBinarySubstrings(string s) {
	vector<int>temp;
    int last = s[0];
    int count = 1;
	for (int j = 1; j<s.size(); j++) {
            if(last==s[j]){
                count++;
            }
            else{
                temp.push_back(count);
                count=1;
                last = s[j];
            }        
    }
    temp.push_back(count);
    count=0;
    for(int i = 1;i<temp.size();i++){
            count+=min(temp[i],temp[i-1]);
    }
    return count;
}
};